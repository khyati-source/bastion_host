Perfect! Let's walk through the full steps to create VPC Interface Endpoints so your private EC2 instance can communicate with AWS SSM without using a NAT Gateway or Internet Gateway.

✅ GOAL
Enable SSM on a private instance by creating VPC Interface Endpoints for:
| Service                              | Required               |
| ------------------------------------ | ---------------------- |
| `com.amazonaws.<region>.ssm`         | ✅ Yes                  |
| `com.amazonaws.<region>.ssmmessages` | ✅ Yes                  |
| `com.amazonaws.<region>.ec2messages` | ✅ Yes                  |
| `com.amazonaws.<region>.logs`        | Optional (for logging) |



🛠 STEP-BY-STEP: Create VPC Interface Endpoints (from scratch)
✅ Step 1: Open VPC Dashboard
Go to the AWS Console

Navigate to VPC → Endpoints

Click “Create Endpoint”


✅ Select this option:
AWS services
Connect to services provided by Amazon with an Interface endpoint, or a Gateway endpoint

This is because you are creating VPC Interface Endpoints to connect your private EC2 instance to AWS internal services like:

ssm

ssmmessages

ec2messages

These are core AWS services, so the correct category is AWS services (not PrivateLink partner or Marketplace).

Once selected, you can:

Search for each service name:

ssm

ssmmessages

ec2messages



✅ Step 2: Choose Services One-by-One
For each of these 3 services, repeat steps below:

Service Name to Search	Type
ssm	Interface
ssmmessages	Interface
ec2messages	Interface
logs (optional)	Interface

✅ Step 3: Create One Interface Endpoint
Let's create com.amazonaws.<region>.ssm first.

① Service Category: AWS Services

② Service Name:
In the search box, type ssm

Select the one like:
com.amazonaws.ap-south-1.ssm

③ VPC:
Choose the VPC where your private instance is running

④ Subnets:
Select one private subnet from each Availability Zone
(This makes endpoint available in all AZs)

⑤ Security Groups:
🔧 Steps to Create a New SG for the Endpoint (Best Practice)
✅ Step 1: Create a New Security Group
Go to VPC → Security Groups → Create security group

Fill in:

Name: ssm-endpoint-sg
Description: Used for SSM VPC endpoint access
VPC: vpc-0de78bfba6e5c09d2
Click Create security group

✅ Step 2: Add Inbound Rule to New SG
After creation, click on the SG → Inbound rules → Edit

Add this:
| Type  | Protocol | Port | Source                                     |
| ----- | -------- | ---- | ------------------------------------------ |
| HTTPS | TCP      | 443  | `sg-0dc4c54317ab8553a` ← (your EC2's SG) ✅ |

✅ Step 3: Use This New SG While Creating the VPC Endpoint
When you create the VPC Interface Endpoints for:

com.amazonaws.ap-south-1.ssm

com.amazonaws.ap-south-1.ssmmessages

com.amazonaws.ap-south-1.ec2messages

→ In the “Security Group” section, select ✅ ssm-endpoint-sg


⑥ Enable Private DNS Name: ✅ Check this option
(so internal DNS works like ssm.<region>.amazonaws.com)
That error means your VPC is missing DNS support, which is required for VPC Interface Endpoints with Private DNS enabled (which is default and recommended).

🛠️ Fix the Error: Enable DNS for Your VPC
You need to enable two settings for your VPC:

✅ enableDnsSupport

✅ enableDnsHostnames



⑦ Policy:
Choose Full Access (default)

⑧ Click Create Endpoint
✅ Step 4: Repeat for Other Services
Repeat the exact same process for:

com.amazonaws.<region>.ssmmessages

com.amazonaws.<region>.ec2messages

(Optional) com.amazonaws.<region>.logs

✅ Step 5: Verify
After creating all endpoints:

Go to VPC → Endpoints

Confirm all are "Available"

Check DNS name if Private DNS is enabled


.

🔹 Step 2: ✅ Confirm Instance is “Managed” by SSM
Go to:

Systems Manager → Fleet Manager → Managed Instances

Look for your instance.

If it shows up = ✅ you're good!

If it doesn’t = wait 2–3 mins after endpoints are ready



===========================================================

✅ Step 0: Pre-Check: Instance Role
Your private EC2 instance must have an IAM role with this policy:

AmazonSSMManagedInstanceCore

📌 How to check/attach:
Go to EC2 → Instances → [your private instance]

Click Actions → Security → Modify IAM Role

Attach or verify a role with AmazonSSMManagedInstanceCore policy

If the role is missing or wrong, SSM will not work.


✅ Step 1: Create VPC Interface Endpoints
Repeat these steps three times, once per required service:

✅ Go to:
VPC → Endpoints → Create Endpoint

🧩 Configuration (for each endpoint)
Service category: AWS services

Search for service name: (create these 3 endpoints)

| Search Term   | Full Endpoint Name                     |
| ------------- | -------------------------------------- |
| `ssm`         | `com.amazonaws.ap-south-1.ssm`         |
| `ssmmessages` | `com.amazonaws.ap-south-1.ssmmessages` |
| `ec2messages` | `com.amazonaws.ap-south-1.ec2messages` |



Replace ap-south-1 with your region if needed

VPC: Choose the VPC where your private instance is running

Subnets: Select the private subnet(s) where your instance is

Security Group:

Choose (or create) a security group that allows inbound port 443 (HTTPS) from the EC2 instance’s security group

Type: HTTPS
Protocol: TCP
Port Range: 443
Source: sg-xxxxxxxx (instance's SG)


Enable private DNS name: ✅ YES (default)

Policy: Leave default (Full Access)

Click Create Endpoint

✅ Step 2: (Optional) Create logs VPC Endpoint
Same steps as above, search for:

com.amazonaws.ap-south-1.logs



✅ Step 3: Wait & Check
After a few minutes:

Go to Systems Manager → Fleet Manager

Your private instance should show up as Managed and Online

If so, go to Session Manager → Start session

You can now connect to the private instance without SSH 🎉

🧠 Troubleshooting Checklist
| ✅ Check                                               | Why it's important                     |
| ----------------------------------------------------- | -------------------------------------- |
| IAM Role with `AmazonSSMManagedInstanceCore`          | Allows SSM agent to talk to AWS        |
| VPC Endpoints for `ssm`, `ssmmessages`, `ec2messages` | Enables private traffic to AWS         |
| Port 443 open on endpoint SG                          | Needed for SSM agent to connect        |
| SSM agent is installed & running                      | Pre-installed in Amazon Linux & Ubuntu |




==================================================================================================



Perfect! You have:

✅ A bastion host (public EC2) with manually created key pair (private + public key)

❗️ But you don't have the original key for the private EC2 instance

✅ You want to use the bastion host to access the private EC2 instance

✅ Solution: Use your own public key (from bastion) to access the private instance
We will do this without restarting or detaching the private instance.

🛠️ Full Step-by-Step Plan (No Keypair, No NAT)
🔹 Step 1: Copy your public key into the private EC2 instance
You already generated a key pair on the bastion host:
# On Bastion Host
cat ~/.ssh/id_rsa.pub
Example:
ssh-rsa AAAAB3Nza...your_key_here... user@host



🔹 Step 2: Add this public key to the private EC2’s ~/.ssh/authorized_keys
But... you don’t have SSH or SSM access yet to the private instance, so you’ll need to:

✅ Option 1 (Best): Use SSM Session Manager (if already enabled)
If SSM is working (we configured endpoints), check:

Go to AWS Console → EC2 → Instances
Select your private instance
Click Connect → Session Manager tab
Click Connect
Then:mkdir -p ~/.ssh
echo "ssh-rsa AAAAB3Nza... your key ..." >> ~/.ssh/authorized_keys
chmod 600 ~/.ssh/authorized_keys
Done ✅ — now from Bastion Host:
ssh -i ~/.ssh/id_rsa ec2-user@<PRIVATE-IP>

🔐 chmod 400 — for Private Key (on Bastion)
✅ Purpose:
Tells SSH: “Only the file owner (you) can read this private key.”
🔹 Use on Bastion host:
chmod 400 ~/.ssh/mykey


🔑 chmod 600 — for authorized_keys (on Private EC2 via SSM)
✅ Purpose:
Means: “Only the owner (e.g., ubuntu) can read/write this file.”

🔹 Use inside private instance:
chmod 600 /home/ubuntu/.ssh/authorized_keys




✅ Step-by-Step to Inject SSH Key for ubuntu User
🔹 1. Stay in SSM shell (you are in /home/ssm-user)
Now switch to root:
sudo -i
✅ To switch to the ubuntu user:
sudo su - ubuntu

🔹 2. Create .ssh directory for ubuntu user
mkdir -p /home/ubuntu/.ssh
nano /home/ubuntu/.ssh/authorized_keys
📋 Paste your public key from Bastion here (the one from ~/.ssh/id_rsa.pub)

